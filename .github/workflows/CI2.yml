name: "test discovery workflow"

on:
  workflow_dispatch:
  push:
    branches:    
      - test-discovery

env:
  CACHE_VERSION: 5
  UV_CACHE_VERSION: 1
  MYPY_CACHE_VERSION: 8
  HA_SHORT_VERSION: "2024.5"
  DEFAULT_PYTHON: "3.12"
  ALL_PYTHON_VERSIONS: "['3.12']"
  # 10.3 is the oldest supported version
  # - 10.3.32 is the version currently shipped with Synology (as of 17 Feb 2022)
  # 10.6 is the current long-term-support
  # - 10.6.10 is the version currently shipped with the Add-on (as of 31 Jan 2023)
  # 10.10 is the latest short-term-support
  # - 10.10.3 is the latest (as of 6 Feb 2023)
  # 10.11 is the latest long-term-support
  # - 10.11.2 is the version currently shipped with Synology (as of 11 Oct 2023)
  # mysql 8.0.32 does not always behave the same as MariaDB
  # and some queries that work on MariaDB do not work on MySQL
  MARIADB_VERSIONS: "['mariadb:10.3.32','mariadb:10.6.10','mariadb:10.10.3','mariadb:10.11.2','mysql:8.0.32']"
  # 12 is the oldest supported version
  # - 12.14 is the latest (as of 9 Feb 2023)
  # 15 is the latest version
  # - 15.2 is the latest (as of 9 Feb 2023)
  POSTGRESQL_VERSIONS: "['postgres:12.14','postgres:15.2']"
  PRE_COMMIT_CACHE: ~/.cache/pre-commit
  UV_CACHE_DIR: /tmp/uv-cache
  SQLALCHEMY_WARN_20: 1
  PYTHONASYNCIODEBUG: 1
  HASS_CI: 1

jobs:

  info:
    name: Collect information & changes data
    outputs:
      # # In case of issues with the partial run, use the following line instead:
      # # test_full_suite: 'true'
      # core: ${{ steps.core.outputs.changes }}
      # integrations_glob: ${{ steps.info.outputs.integrations_glob }}
      # integrations: ${{ steps.integrations.outputs.changes }}
      pre-commit_cache_key: ${{ steps.generate_pre-commit_cache_key.outputs.key }}
      python_cache_key: ${{ steps.generate_python_cache_key.outputs.key }}
      # requirements: ${{ steps.core.outputs.requirements }}
      # mariadb_groups: ${{ steps.info.outputs.mariadb_groups }}
      # postgresql_groups: ${{ steps.info.outputs.postgresql_groups }}
      python_versions: ${{ steps.info.outputs.python_versions }}
      # test_full_suite: ${{ steps.info.outputs.test_full_suite }}
      test_group_count: ${{ steps.info.outputs.test_group_count }}
      test_groups: ${{ steps.info.outputs.test_groups }}
      # tests_glob: ${{ steps.info.outputs.tests_glob }}
      # tests: ${{ steps.info.outputs.tests }}
      # skip_coverage: ${{ steps.info.outputs.skip_coverage }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.1.2
        
      - name: Generate partial Python venv restore key
        id: generate_python_cache_key
        run: >-
          echo "key=venv-${{ env.CACHE_VERSION }}-${{
            hashFiles('requirements_test.txt') }}-${{
            hashFiles('requirements_all.txt') }}-${{
            hashFiles('homeassistant/package_constraints.txt') }}" >> $GITHUB_OUTPUT
      - name: Generate partial pre-commit restore key
        id: generate_pre-commit_cache_key
        run: >-
          echo "key=pre-commit-${{ env.CACHE_VERSION }}-${{
            hashFiles('.pre-commit-config.yaml') }}"  >> $GITHUB_OUTPUT

      - name: Collect additional information
        id: info
        run: |
          echo "python_versions: ${ALL_PYTHON_VERSIONS}"
          echo "python_versions=${ALL_PYTHON_VERSIONS}" >> $GITHUB_OUTPUT
          test_groups="[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
          test_group_count=10
          echo "test_group_count: ${test_group_count}"
          echo "test_group_count=${test_group_count}" >> $GITHUB_OUTPUT
          echo "test_groups: ${test_groups}"
          echo "test_groups=${test_groups}" >> $GITHUB_OUTPUT

  base:
    name: Prepare dependencies
    runs-on: ubuntu-22.04
    needs: info
    timeout-minutes: 60
    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.info.outputs.python_versions) }}
    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v4.1.2
      - name: Set up Python ${{ matrix.python-version }}
        id: python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
      - name: Generate partial uv restore key
        id: generate-uv-key
        run: >-
          echo "key=uv-${{ env.UV_CACHE_VERSION }}-${{
            env.HA_SHORT_VERSION }}-$(date -u '+%Y-%m-%dT%H:%M:%s')" >> $GITHUB_OUTPUT
      - name: Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v4.0.2
        with:
          path: venv
          lookup-only: true
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            needs.info.outputs.python_cache_key }}
      - name: Restore uv wheel cache
        if: steps.cache-venv.outputs.cache-hit != 'true'
        uses: actions/cache@v4.0.2
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: >-
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
            steps.generate-uv-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.python.outputs.python-version }}-uv-${{ env.UV_CACHE_VERSION }}-${{ env.HA_SHORT_VERSION }}-
      - name: Install additional OS dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get -y install \
            bluez \
            ffmpeg \
            libavcodec-dev \
            libavdevice-dev \
            libavfilter-dev \
            libavformat-dev \
            libavutil-dev \
            libswresample-dev \
            libswscale-dev \
            libudev-dev
      - name: Create Python virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          . venv/bin/activate
          python --version
          pip install "$(grep '^uv' < requirements_test.txt)"
          uv pip install -U "pip>=21.3.1" setuptools wheel
          uv pip install -r requirements_all.txt
          uv pip install -r requirements_test.txt
          uv pip install -e . --config-settings editable_mode=compat
          
  TestDiscovery:
    runs-on: ubuntu-latest
    needs: base

    # outputs:
    #   outputmatrix: ${{ steps.set-matrix.outputs.matrix }}
        
    steps:

    - name: Check out code from GitHub
      uses: actions/checkout@v4.1.2
      
    - name: Set up Python ${{ env.DEFAULT_PYTHON }}
      id: python
      uses: actions/setup-python@v5.1.0
      with:
        python-version: 3.12
        check-latest: true

    - name: Restore base Python virtual environment
      id: cache-venv
      uses: actions/cache/restore@v4.0.2
      with:
        path: venv
        fail-on-cache-miss: true
        key: >-
          ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{
          needs.info.outputs.python_cache_key }}

    - name: Run split_tests.py
      run: |
        . venv/bin/activate
        # python -m pip install -r ./requirements_test_all.txt
        python -m script.split_tests ${{ needs.info.outputs.test_group_count }} tests
    
    - name: Upload pytest_buckets
      uses: actions/upload-artifact@v4.3.1
      with:
        name: pytest_buckets
        path: pytest_buckets.txt
        overwrite: true

  #   # this is one way to make a new matrix, but is using the old syntax and we def shouldn't use this
  #   # this is where we can make the number of test jobs configurable, and probably combined with the previous step for more advanced scenarios
  #   - name: print matrix data
  #     id: set-matrix
  #     run: |
  #       echo "::set-output name=matrix::{\"include\":[{\"project\":\"foo\",\"config\":\"Debug\"},{\"project\":\"bar\",\"config\":\"Release\"}]}"

  # Tester1BuiltMatrix:
  #   runs-on: ubuntu-latest
  #   needs: Tester1

  #   # use the matrix we built in the previous job where we collected the tests and split them
  #   strategy:
  #     fail-fast: false
  #     matrix: ${{ fromJson(needs.Tester1.outputs.outputmatrix) }}
        
  #   steps:
  #   # get the artifact we shared in the collection job
  #   - uses: actions/download-artifact@v4
  #     with:
  #       name: tests-artifact

  #   # just testing
  #   - name: print test artifact
  #     run: |
  #       cat $GITHUB_WORKSPACE/foo.txt

  #   # and show which matrix values we have for the current job.
  #   # This is also where we could actually run the tests.
  #   - name: print matrix data
  #     run: |
  #       echo "project ${{ matrix.project }}, config ${{ matrix.config }}"

  # # this is a seperate way to build a matrix that I was just curious about
  # Tester2Script:
  #   runs-on: ubuntu-latest

  #   outputs:
  #     outputmatrix: ${{ steps.set-matrix.outputs.outputmatrix }}
    
  #   steps:
  #     - uses: actions/github-script@v7
  #       id: set-matrix
  #       with:
  #         script: |
  #           const generatedMatrix = []
            
  #           generatedMatrix.push({
  #             group: 0,
  #             pythonversion: 2.7
  #           })

  #           generatedMatrix.push({
  #             group: 2,
  #             pythonversion: 3.9
  #           })
            
  #           core.setOutput('outputmatrix', { 'include': generatedMatrix })

            
  # Tester2BuiltMatrix:
  #   runs-on: ubuntu-latest
  #   needs: Tester2Script

  #   strategy:
  #     fail-fast: false
  #     matrix: ${{ fromJson(needs.Tester2Script.outputs.outputmatrix) }}
        
  #   steps:
  #   - uses: actions/download-artifact@v4
  #     with:
  #       name: tests-artifact

  #   - name: print test artifact
  #     run: |
  #       cat $GITHUB_WORKSPACE/foo.txt
      
  #   - name: print matrix data
  #     run: |
  #       echo "group ${{ matrix.group }}, python-version ${{ matrix.pythonversion }}"
